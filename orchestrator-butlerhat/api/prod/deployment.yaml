apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-orchestrator-service-account
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: api-orchestrator-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/exec", "pods/log", "services", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-orchestrator-rolebinding
  namespace: default
subjects:
- kind: ServiceAccount
  name: api-orchestrator-service-account
  namespace: default
roleRef:
  kind: Role
  name: api-orchestrator-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-orchestrator
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-orchestrator
  template:
    metadata:
      labels:
        app: api-orchestrator
    spec:
      serviceAccountName: api-orchestrator-service-account
      containers:
      - name: api-orchestrator
        image: api-orchestrator-image  
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
      volumes:
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        - name: kube-config
          hostPath:
            path: /home/david/.kube/config

---
apiVersion: v1
kind: Service
metadata:
  name: api-orchestrator-service
  namespace: default
spec:
  selector:
    app: api-orchestrator
  ports:
  - name: fastapi
    protocol: TCP
    port: 8000
    targetPort: 8000


# Connect with cloudflare
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: cloudflared
  name: cloudflared-deployment-api-orchestrator
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      pod: cloudflared
  template:
    metadata:
      labels:
        pod: cloudflared
    spec:
      containers:
      - command:
        - cloudflared
        - tunnel
        - --metrics
        - 0.0.0.0:2000
        - run
        args:
        - --token
        - $(TUNNEL_TOKEN)
        image: cloudflare/cloudflared:latest
        name: cloudflared-api-orchestrator
        env:
        - name: TUNNEL_TOKEN
          valueFrom:
            secretKeyRef:
              name: cloudflared-token
              key: token
        resources:
          limits:
            memory: "1Gi"
            cpu: "1"
        livenessProbe:
          httpGet:
          # Cloudflared has a /ready endpoint which returns 200 if and only if
          # it has an active connection to the edge.
            path: /ready
            port: 2000
          failureThreshold: 1
          initialDelaySeconds: 10
          periodSeconds: 10